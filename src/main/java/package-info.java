/*
 * Singleton:   применён - в Controller, вряд ли очень необходим, но и возможность создавать другие экземпляры тоже не нужна.
 * Factory:     применён - в EyesColor (статическая фабрика, получается),
 *              чтобы вынести логику добавления и подбора в один изолированный класс с ограниченным набором значений.
 *              Абстрактная - HairOption, можно множить характеристики, не выходя за пределы пакета, например,
 *              добавить текстуру (кудрявые, волнистые, прямые) и т.д.
 * Builder:     применён - Person, большой конструктор, как иминимум один необязательный параметр.
 * Adapter:     применён - FioUniform, при гипотетическом усложеннии структуры Fio, например вторыми отчествами, или произвольным
 *              составом, пришлось бы переделывать toString() в Person.
 * Bridge:      применён - в Hair характекристики вместо наследования собираем частями, так компактнее, особенно в перспективе, если
 *              понадобится что-нибудь добавить.
 * Facade:      применен - исключительно из логики названия InputProcessor не должен содеражать подробностей сборки Person,
 *              тоже не самое необходимое изменение, но пригодится, если что-то другое или по-другому нужно будет генерировать,
 *              исходя из значения ввода.
 * DTO:         применён - Fio, чтобы передавать и обрабатывать отдельную конткретную сущность, и, заодно, чтобы унифицировать генераторы.
 * Шаблон:      применён - короткий шаблонный метод есть у Generator, из двух шагов, но значительно облегчает код.
 */